---
title: "Human analysis"
format: html
editor: visual
---

```{r}
library(dplyr) 
library(tidyverse) 
library(ggplot2) 
library(purrr) 
library(broom)

human_aug <- read_tsv(file = "../data/03_dat_aug_human.tsv.gz")
human_aug_log2fc <- read_tsv(file = "../data/03_dat_aug_human_log2fc.tsv.gz")
```

We want to create a subset where we don't take into account genes in specific cell lines with the same expression levels with and without treatment.

The bulk of zeros suggests that, for many genes in many cell lines, there is no difference in expression between the two groups. This is a common observation, as many genes in different cell lines may not respond strongly to experimental conditions

We here omit observations that didn't present any difference in expression when treated and untreated and then exclude the variable.

```{r}
# human_sub <- human_log2fc |> 
# filter(log2fc != 0) |>
# select(-log2fc)

#human_sub
```

We then return to a longer format

Actual analysis

```{r}
human_gene <- human_to_analyze |> 
  #select(-c(Genotype, # symbol)) |>
  relocate(Treatment, .before = 1) |> 
  filter(Cell_line == "A375") |> 
  select(-Cell_line)

human_gene
```

```{r}
is_grouped <- group_vars(human_gene)%in% "Cell_line" 

is_grouped
```

We use the group_by function to group your gravier_clean_aug_long-dataset by gene and then add the nest()- and ungroup()-functions to your pipeline

```{r}
human_gene_nested <- human_gene |>
  group_by(gene_id) |> 
  nest() |>
  ungroup() |> 
  rename(nest_data = data)

human_gene_nested
```

```{r}
human_gene_nested <- human_gene_nested |> 
  group_by(gene_id) |>
  mutate(model_obj_gene = map(.x = nest_data,
                              .f = ~lm(formula = log2_expression_level ~ Treatment,
                                       data = .x)))

human_gene_nested
```

```{r}
human_gene_nested <- human_gene_nested |>
  mutate(model_obj_gene_tidy = map(.x = model_obj_gene,
                                   .f = ~tidy(.x, conf.int = TRUE,
                                              conf.level = 0.95)))

human_gene_nested
```

```{r}
desc_statistics <- human_gene_nested |> 
  unnest(model_obj_gene_tidy)

desc_statistics
```

```{r}
desc_statistics <- desc_statistics |>
  filter(term == "Treatment") |> 
  select("gene_id", "p.value", "estimate", "conf.low", "conf.high") |>
  ungroup()

desc_statistics
```

```{r}
human_gene_significant <- desc_statistics |>
  mutate(q.value = p.adjust(p.value)) |>
  mutate(significant = case_when(q.value < 0.05 ~ "yes", 
                                 q.value >= 0.05 ~ "no"))

human_gene_significant
```

```{r}
human_gene_significant |> 
  filter(significant == "yes")
```

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

Meta apo vradini epoikinonia me Amantonios

```{r}
#We also want to create a wide version where the compounds are on different columns
human_wide <- human_joined |>
  select(-c(Genotype, symbol)) |>
 
  pivot_wider(
    names_from = gene_id,
    values_from = Expression_levels
    ) |>
  
  mutate(Treatment = case_when(Treatment == "DMSO" ~ 0,
                               Treatment == "G007.LK" ~ 1)) |>
  
  group_by(Treatment) |>
  
  arrange(Treatment) |>
  
  select(-Cell_line)

human_wide
```

```{r}
# Return to long format
human_long <- human_wide |>
  pivot_longer(cols = contains("ENSG"),
               names_to = "Gene",
               values_to = "Expression_levels")

human_long
```

```{r}
human_long_nested <- human_long |>
  group_by(Gene) |> 
  nest() |>
  ungroup() |> 
  rename(nest_data = data)

human_long_nested
```

```{r}
human_long_nested <- human_long_nested |> 
  group_by(Gene) |>
  mutate(model_obj_gene = map(.x = nest_data,
                              .f = ~lm(formula = Expression_levels ~ Treatment,
                                       data = .x)))

human_long_nested
```

```{r}
human_long_nested <- human_long_nested |>
  mutate(model_obj_gene_tidy = map(.x = model_obj_gene,
                                   .f = ~tidy(.x, conf.int = TRUE,
                                              conf.level = 0.95)))

human_long_nested
```
