---
title: "02_clean"
format: html
editor: visual
message: false
---

First we need to read the necessary files and the libraries

```{r message = FALSE}

library(tidyverse)
library(stringr)
library(dplyr)
library(tidyr)
source("../R/99_proj_func.R")

#mouse datasets
mouse_data <- read_tsv(file = "../data/01_dat_load_mouse.tsv.gz")
mouse_suppl_data <- read_tsv(file = "../data/01_dat_load_mouse_suppl.tsv.gz")

#human_datasets
human_data <- read_tsv(file = "../data/01_dat_load_human.tsv.gz")
human_suppl_data <- read_tsv(file = "../data/01_dat_load_human_suppl.tsv.gz")

data_list <- list(mouse_data, mouse_suppl_data,human_data, human_suppl_data)
```

First we need to see how the data are represented

```{r echo = FALSE}
mouse_data[1:10, ]
```

```{r echo = FALSE}
human_data[1:10, ]
```

### Check for the possible NAs in the 4 datasets

```{r}
walk(data_list, nas_present)
```

First of all we observed that none of the data set contains any missing values

### **Mouse data set description:**

Looking at this data set we can see that it represents the experimental compounds as variables and lists genes by their assebly abbreviations and their common name as rows. Each cell in the data set holds the expression levels of individual genes within the B16-F10 cell line. To optimize the utilization of this data set can perform a tidy procedure.

### **Human data set description:**

This data set comprises a gene id, a column containing common gene name and multiple columns representing the cell lines that were used for the experiment. This data set also requires some cleaning before analyzing it.

# Mouse data sets

### Mouse data cleaning

Converting to the long format

```{r}
# Convert to long format 

mouse_data_long <- mouse_data |>
  pivot_longer(
    cols = -c(gene_id, symbol),
    names_to = "treatment_replicate",
    values_to = "expression_levels"
  )

# Separate the treatment and replicate information
mouse_data_separated_repl <- mouse_data_long |>
  separate(
    col = treatment_replicate,
    into = c("treatment", "replicate"),
    sep = "-"
    )
```

```{r}
mouse_clean <- mouse_data_separated_repl |>
# The symbol variable does not provide us with addtional information so we are going to drop it
  select(-symbol) |>
  pivot_wider(names_from = gene_id, 
              values_from = expression_levels
              )

mouse_clean[1:10]
```

After the cleaning process the resulting format format presents various treatments as rows with replicate number and gene_ids as variables.

Moving on to the mouse supplementary file.Upon inspection of the data set it is seen that most supplementary data consists of general experiment metadata that do not vary between the individual drug experiments.

## Cleaning of the Mouse Supplementary Data

```{r}
# Clean the column names from the mouse supplementary data set

mouse_suppl_clean <-mouse_suppl_data |>
  janitor::clean_names() |>
  rename_with(
    ~ str_remove(., "characteristics_"),# remove the characteristics_ from the column names
    starts_with("characteristics_"),
  ) |>
  rename_with(
       ~str_remove(., "comment_"), #remove the comment_ from the column names
    starts_with("comment_")
  )
```

```{r}
# Some extra cleaning with the variable factor_value_compound

mouse_suppl_clean <- mouse_suppl_clean |>
  mutate(
    factor_value_compound= case_when(
      factor_value_compound == "dimethyl sulfoxide (0.1 percent)" ~ "0.1%",
      factor_value_compound == "G007LK (1 micromolar)" ~ "1μM",
      factor_value_compound == "WNT3a (0.5 microgram per milliliter)" ~ "0.5mg/ml ",
      factor_value_compound == "WNT3a (0.5 microgram per milliliter); G007LK (1 micromolar)" ~ "0.5mg/ml; 1μΜ",
      TRUE ~ factor_value_compound) # keep the original value of the compound_dose column if the conditions are not met
    )|>
  rename(compound_dose = factor_value_compound) |>
  #get rid of the redundant columns
  select(-c(extract_name, assay_name)) #those two columns contain the same information as the source_name

mouse_suppl_clean[1:10, ]
```

Now we are done with the cleaning procedure of the mouse data and supplementary data

```{r}
#Save the files containing the mouse data
write_tsv(x = mouse_clean, 
          file = ("../data/02_dat_clean_mouse.tsv.gz"))
write_tsv(x = mouse_suppl_clean,
          file = ("../data/02_dat_clean_mouse_suppl.tsv.gz"))
```

## Human data sets

This data set is also unity. Therefore we are going to transform them via pivoting longer. But before proceeding, it is evident that the column names encompass dual information. The Cell line and the compound used in each experiment. Consequently we have to split these two.

This is our approach of doing that:

```{r}
human_trans <-human_data |>
  rename_with( 
    ~case_when( 
      #We see that the columns containing the cell lines contain the name of the cell lines and the DMSO or G007.LK compounds separated by a "."
       str_detect(., ".DMSO") ~ str_replace_all(.,
                                             ".DMSO",
                                             "_DMSO"),
       str_detect(., ".G007.LK") ~ str_replace_all(.,
                                                ".G007.LK",
                                                "_G007LK"),
       TRUE ~ .  # keep the original name of the columns if the aforementioned conditions are not met
     )
   ) 
```

```{r}
# Pivot the human dataframe
human_clean_long <- human_trans |>
  pivot_longer(
    cols = -(gene_id:symbol),
    names_to = c("cell_line",
                 "treatment"),  
    values_to = "expression_levels",
    names_sep = "_"
      )|>
  select(-symbol) # we exclude the symbol for the same reason we did when we were cleaning the mouse dataset
```

Now we are going to finish our cleaning process by getting back to wide format

```{r}
human_clean <- human_clean_long |>
  pivot_wider(
    names_from = gene_id,
    values_from = expression_levels
  )

human_clean[1:10, ]
```

After cleaning we have a data set with the genes as variables and cell line and treatment as rows.

Now we are going to clean the supplementary human file.

The source name column has the same format as the columns we pivoted before and separated them into cell_line and compound columns.

```{r}
#Clean the column names from the human supplementary data
human_suppl_clean <- human_suppl_data |>
  janitor::clean_names() |>
  rename_with(
    ~ str_remove(., "characteristics_"),
    starts_with("characteristics_")
  ) |>
   rename_with(
       ~str_remove(., "comment_"),
    starts_with("comment_")
    )
```

```{r}
# We separate the first column
# We notice an inconsistency with the names of the cell lines which creates some problems when we try to separate the two components of the first column

human_suppl_clean_change_treat <- human_suppl_clean |>
  mutate(source_name =
  case_when(
      #We see that the column source name contains the name of the cell lines and the compounds separated by a "."
       str_detect(source_name, "\\.DMSO$") ~ str_replace(source_name,
                                                         "\\.DMSO",
                                                         "_DMSO"),
       str_detect(source_name, "\\.G007.LK") ~ str_replace(source_name,
                                                           "\\.G007.LK",
                                                           "_G007LK"),
       TRUE ~ source_name  # Keep the original name of the columns if the aforementioned conditions are not met
     )# 
   ) |>
  separate(source_name,
           into = c("cell_line", "treatment"),
           sep = "\\_") 
```

```{r}
human_suppl_comp_dose <- human_suppl_clean_change_treat |>
  mutate(
    Compound_dose = str_c(factor_value_dose ,unit_dose_unit, sep = " "),
    Compound_dose = case_when(
    Compound_dose == "0.01 percent" ~ "0.01%",
    Compound_dose == "1 micromolar" ~ "1μM",
    TRUE ~ Compound_dose
      ) # Keeps the original value of the column if the condition is not met
  )|> select(
      -c(factor_value_dose,unit_dose_unit)
    )
```

```{r}
#Extract the redundant columns
human_suppl_clean_final <- human_suppl_comp_dose |>
  select(-c(extract_name,
            assay_name,
            factor_value_compound))

human_suppl_clean_final[1:10, ]
```

```{r}
#Write the two clean datasets to tsv files

write_tsv(x = human_clean,
          file = "../data/02_dat_clean_human.tsv.gz")
write_tsv(x = human_suppl_clean_final,
          file = "../data/02_dat_clean_human_suppl.tsv.gz")
```
