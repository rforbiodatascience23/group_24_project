---
title: "Clean file"
format: html
editor: visual
---

```{r}
#|label: load the packages
library(tidyverse)
library(stringr)
library(dplyr)
library(tidyr)
source("../R/99_proj_func.R")
```

```{r}
walk(data_list, nas_present)
```

This data set contains a column of the gene id, a column of the common gene name and the rest of the columns are composed of the cell lines that were used for the experiment.

We will rename the column names as untreated and treated based on DMSO (vehicle solvent for the drug) and G007-LK (drug), respectively. We observe that there are many variables in column names, so we need to separate them.

```{r}
human_data
```

```{r}
human_data_trans <-human_data |>
  rename_with( #we use this function in order to change the name of the columns
    ~case_when( # change the name of the column based on a condition met by str_detect
      #We see that the columns containing the cell lines contain the name of the cell lines and the DMSO or G007.LK compounds separated by a "." 
       str_detect(., ".DMSO") ~ str_replace_all(.,
                                             ".DMSO",
                                             "_DMSO"),
       str_detect(., ".G007.LK") ~ str_replace_all(.,
                                                ".G007.LK",
                                                "_G007.LK"),
       TRUE ~ .  # Keep the original name of the columns if the aforementioned conditions are not met
     )# Apply case when function in each column
   ) #rename_with()


#check how the column names changed
human_data_trans
```

These data are untidy. So we are going to transform them via pivoting

```{r}
#Pivot the human dataframe
human_data_clean_long <- human_data_trans |> 
  pivot_longer(
    cols = -(gene_id:symbol),
    names_to = c("Cell_line", 
                 "Treatment"),  
    values_to = "Expression_levels",
    names_sep = "_"
      ) 

human_data_clean_long
```

```{r}
human_data_clean_long <- human_data_clean_long |>
  mutate(
    Gene = str_c(gene_id, symbol, sep = "_")
    ,.before = 1) |> 
  select(-c(gene_id, symbol))

human_data_clean_long
```

### \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

```{r}
human_suppl_data
```

The name column has the same format as the columns we pivoted before and separated them into Cell_line and Compound columns.

```{r}
# We will use the clean_names function provided by the janitor package in order to make our columns look more appealing
human_suppl_clean<- human_suppl_data |> 
  janitor::clean_names()
```

```{r}
#We separate the first column
# We notice an inconsistency with the names of the cell lines which creates some problems when we try to separate the two components of the first column 

human_suppl_clean<-human_suppl_clean |>
  mutate(source_name = 
  case_when( # change the name of the column based on a condition met by str_detect
      #We see that the column source name contains the name of the cell lines and the compounds separated by a "." 
       str_detect(source_name, "\\.DMSO$") ~ str_replace(source_name,"\\.DMSO", "_DMSO"),
       str_detect(source_name, "\\.G007.LK") ~ str_replace(source_name,"\\.G007.LK", "_G007.LK"),
       TRUE ~ source_name  # Keep the original name of the columns if the aforementioned conditions are not met
     )# Apply case when function in each column
   ) |> 
  separate(source_name, 
           into = c("Cell_line", "Treatment"),
           sep = "\\_") #rename_wet 
```

```{r}
human_suppl_clean<- human_suppl_clean |> 
  mutate(
    Compound_dose = str_c(factor_value_dose ,unit_dose_unit, sep = " "),
    Compound_dose = case_when(
    Compound_dose == "0.01 percent" ~ "0.01%",
    Compound_dose == "1 micromolar" ~ "1Î¼M",
    TRUE ~ Compound_dose
      ) # Keeps the original value of the column if the condition is not met
  )|> select(
      -c(factor_value_dose,unit_dose_unit)
    )
```

```{r}
human_suppl_clean <- human_suppl_clean |> 
  mutate(Genotype = characteristics_genotype) |>
  select(-c(characteristics_cell_line,
            extract_name,
            assay_name))

human_suppl_clean
```

```{r}
#create the two clean datasets to 02_human_clean.tsv

write_tsv(human_data_clean_long, "../data/02_dat_clean_human.tsv")
write_tsv(human_suppl_clean, "../data/02_dat_clean_human_suppl.tsv")
```
