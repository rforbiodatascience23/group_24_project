---
title: "03_augment"
format: html
editor: visual
---

Now we are going to proceed with the augmentation of the mouse and human data sets. For that matter we are loading the clean mouse and human datasets

```{r message=FALSE}
library(tidyverse)
library(dplyr)
library(stringr)
library(tidyr)

Sys.setenv(VROOM_CONNECTION_SIZE = 3062144) # Setting a larger connection buffer to be able to load the data

# Loading the clean data for the mouse and human datasets
mouse_clean <- read_tsv(file = "../data/02_dat_clean_mouse.tsv.gz")
mouse_data_suppl <- read_tsv(file = "../data/02_dat_clean_mouse_suppl.tsv.gz")
human_clean <- read_tsv(file = "../data/02_dat_clean_human.tsv.gz")
human_suppl_clean <- read_tsv(file = "../data/02_dat_clean_human_suppl.tsv.gz")
```

```{r echo= FALSE}
mouse_clean[1:10, ]
```

## Mouse augmentation

We now create a new dataframe where exclude the control group experiments (DMSO) from our analysis. We do that by dividing the gene expressions of non-control values by the corresponding DMSO values within each replicate for other treatments. This transformation shifts our data set from absolute expression to relative expressions. Following this transformation, we then apply log2 transform the relative expressions. This transformation effectively sets a \_baseline where a value of 0 indicates no change between the control and treatment conditions. Positive values mean up regulation and negative values suggest down regulation.

$$
\log(expression\_treatment) - \log(expression\_control) = \log(\frac{expression\_treatment}{expression\_control (DMSO)})
$$

We also calculated the local minimum for every replicate/experiment for more precise transformation of each experiment.

This is how we did it:

Firstly we excluded the genes that did not show any differences (expression levels =0) across all replicates

```{r}
test_mouse <- select(mouse_clean, -c(treatment, replicate))
zeroes_removed_mouse <- test_mouse |>
     select(where(~ !all(.x == 0)))
```

The with the rest of our data we normalize and scale the mouse gene expression data

```{r}
# Replace the zero values in the dataset with a calculated minimum-non-zero value per observation multiplied by 0.65. Thus we ensure that the 0 values that cannot undergo log transformation are replaced by a small non-zero value.
zeroes_replaced_mouse <- zeroes_removed_mouse |>
  rowwise() |>
  mutate(min_non_zero = min(c_across
                            (where
                              (is.numeric))[c_across(where
                                                     (is.numeric)) != 0], na.rm = TRUE)) |>
  ungroup() |>
  mutate(across
         (where
           (is.numeric), ~ ifelse(. == 0, 
                                  0.65 * min_non_zero,
                                  .))) |>
  select(-min_non_zero)

#This part calculated the sum across all genes for every observation in the dataset with the replaced zeroes
zeroes_replaced_sums_mouse <- zeroes_replaced_mouse |>
  rowwise() |>
  mutate(total_sum = sum(c_across
                         (everything()),
                         na.rm = TRUE))

n = 1000000 # the data are normalized in TPM that is why we selected 1 million as n

#Data normalization. This part ensures that different experiments with varying total expression levels are brought to consistant scale
scaled_data_mouse <- zeroes_replaced_sums_mouse |>
  mutate(scaling_factor = n / total_sum) |>
  rowwise() |>
  mutate(across(-c(total_sum, scaling_factor), ~ . * scaling_factor)) |>
  select(-total_sum, -scaling_factor)

scaled_data_mouse |>
  rowwise() |>
  mutate(row_sums = sum(c_across
                        (everything()), 
                        na.rm = TRUE))

#This part of the code binds the normalized and scaled expression data with the first columns from the original mouse data.
joined_mouse <- bind_cols(mouse_clean[1:2],
                          scaled_data_mouse)
```

This operation will be performed now

```{r}
#"Make a baseline dataset with the values for the control group"
DMSO <- joined_mouse |>
  filter(treatment=='DMSO') |>
  select(-c(treatment))

#"Making the relative dataset"
rel_mouse_df <- joined_mouse |>
   # Creating baseline columns for each gene with the baseline values for each replicate
  left_join(DMSO,                   
            by = 'replicate',
            suffix = c("", "_baseline")
            ) |>
  # Subtracting baseline values from the original gene columns
  mutate(across(-c("treatment",
                   "replicate",
                   ends_with('baseline')),
                ~ log(.x / get(str_c(cur_column(), "_baseline")),2)
                )
         ) |> 
  select(-c(ends_with('baseline')))  # remove the baseline helper columns
```

```{r echo = FALSE}
rel_mouse_df[1:10, ]
```

## Human data set augmentation

```{r echo = FALSE}
human_clean[1:10, ]
```

We implement the same notion as with the mouse data

```{r}
test_human <- select(human_clean, -c(treatment, cell_line))
zeroes_removed_human <- test_human |>
     select(where(~ !all(.x == 0)))
```

```{r}
zeroes_replaced_human <- zeroes_removed_human |>
  rowwise() |>
  mutate(min_non_zero = min(c_across
                            (where(is.numeric))[c_across(where
                                                         (is.numeric)) != 0], 
                            na.rm = TRUE)) |>
  ungroup() |>
  mutate(across
         (where
           (is.numeric), ~ ifelse(. == 0, 
                                  0.65 * min_non_zero,
                                  .))) |>
  select(-min_non_zero)

zeroes_replaced_sums_human <- zeroes_replaced_human |>
  rowwise() |>
  mutate(total_sum = sum(c_across
                         (everything()), 
                         na.rm = TRUE))
n = 1000000

scaled_data_human <- zeroes_replaced_sums_human |>
  mutate(scaling_factor = n / total_sum) |>
  rowwise() |>
  mutate(across
         (-c(total_sum, scaling_factor), ~ . * scaling_factor)) |>
  select(-total_sum, -scaling_factor)

scaled_data_human |>
  rowwise() |>
  mutate(row_sums = sum(c_across
                        (everything()), 
                        na.rm = TRUE))

joined_human <- bind_cols(human_clean[1:2],
                          scaled_data_human)
```

```{r}
human_aug <- joined_human |> 
  pivot_longer(
    cols = starts_with("ENSG"),
    names_to = "gene_id",
    values_to = "expression_levels"
  )
```

We can use it for the first PCA analysis based on the relative expressions of the gene expressions among the 18 cell lines in the two different conditions .

```{r}
human_aug <- human_aug |>
  mutate(log2_expression_levels = log2(expression_levels)) |>
  select(-expression_levels)
```

The next data frame is going to be the data frame format used for the PCA analysis with the relative expression levels

```{r}
human_aug_wide_gene <- human_aug |>
  pivot_wider(names_from = gene_id,
              values_from =log2_expression_levels)
```

```{r echo = FALSE}
human_aug_wide_gene
```

Now we are going to create the format for the PCA using the log2fc as a value for the gene columns

```{r}
human_aug_wide_treat <- human_aug |>
  pivot_wider(names_from = "treatment",
              values_from = "log2_expression_levels")
```

To be used for PCA when we use the log2foldchange as a measure for the gene expression.

```{r}
#This is where we are calculating the log2foldchange for every gene
human_aug_log2fc <- human_aug_wide_treat |>
  mutate(log2foldchange = G007LK - DMSO)|> 
  select(-c(DMSO, G007LK))
```

```{r}
human_aug_log2fc_wide<- human_aug_log2fc |>
  pivot_wider(names_from = gene_id,
              values_from =log2foldchange)
```

```{r echo = FALSE}
human_aug_log2fc_wide
```

We proceed without joining the mouse and the human supplementary data to the original data sets since they do convey any useful information.

```{r}
write_tsv(x = rel_mouse_df, file = str_c("../data/03_dat_aug_mouse", ".tsv.gz"))

write_tsv(human_aug, "../data/03_dat_aug_human.tsv.gz")
write_tsv(human_aug_wide_gene, "../data/03_dat_aug_human_wide_gene.tsv.gz")
write_tsv(human_aug_log2fc_wide, "../data/03_dat_aug_human_log2fc_wide.tsv.gz")
```
