---
title: "Augment"
format: html
editor: visual
---

```{r message=FALSE}
library(tidyverse)
library(dplyr)
library(stringr)
library(tidyr)
source("../R/99_proj_func.R")

Sys.setenv(VROOM_CONNECTION_SIZE = 3062144) # Setting a larger connection buffer to be able to load the data

# Loading the clean data for the mouse and human datasets
mouse_clean <- read_tsv(file = "../data/02_dat_clean_mouse.tsv.gz")
mouse_data_suppl <- read_tsv(file = "../data/02_dat_clean_mouse_suppl.tsv.gz")
human_clean <- read_tsv(file = "../data/02_dat_clean_human.tsv.gz")
human_suppl_clean <- read_tsv(file = "../data/02_dat_clean_human_suppl.tsv.gz")
```

```{r echo= FALSE}
mouse_clean[1:10, ]
```

## Mouse augmentation

We now create a new data frame where we "exclude" the control group experiments (DMSO) from our analysis. We do that by dividing the gene expressions of non-control values by the corresponding DMSO values within each replicate for every treatments. This transformation shifts our data set from absolute expression to relative expression. Following this transformation, we then apply log2 transformation on the relative expressions. This transformation effectively sets a baseline where a value of 0 indicates no change between the control and treatment conditions. Positive values suggest up regulation and negative values down regulation.

$$
\log(expression\_treatment) - \log(expression\_control) = \log(\frac{expression\_treatment}{expression\_control (DMSO)})
$$

We also calculated the local minimum observed expression for every replicate/experiment for more precise transformation of each experiment.

This is how we did it:

Firstly we excluded the genes that did not show any expression (expression levels = 0) across all replicates of all treatments

```{r}
test_mouse <- select(mouse_clean, -c(treatment, replicate))

zeroes_removed_mouse <- test_mouse |>
     select(where(~ !all(.x == 0)))
```

We now want to do zero replacement for the rest of the zeroes in the data set. The zeroes are an issue, since log(0) is undefined, and we would like to be able to log-transform the data. In some cases, the zeroes may suggest expression below the detection limit. Therefore, we've replaced the zeroes with 65% of the lowest non-zero value in the experiment. All the data is compositional so when we do the replacement, we want to make sure that the sums of each experiment is the same. We do that by rescaling everything again after replacement by dividing by the sum of rows and multiplying by 10\^6.

```{r}
joined_mouse <- zero_replacement(zeroes_removed_mouse, mouse_clean[1:2])
```

This operation will be performed now

```{r}
#"Make a baseline dataset with the values for the control group"
DMSO <- joined_mouse |>
  filter(treatment=='DMSO') |>
  select(-c(treatment))

#"Making the relative dataset"
rel_mouse_df <- joined_mouse |>
   # Creating baseline columns for each gene with the baseline values for each replicate
  left_join(DMSO,                   
            by = 'replicate',
            suffix = c("", "_baseline")
            ) |>
  # Subtracting baseline values from the original gene columns
  mutate(across(-c("treatment",
                   "replicate",
                   ends_with('baseline')),
                ~ log(.x / get(str_c(cur_column(), "_baseline")),2)
                )
         ) |> 
  select(-c(ends_with('baseline')))  # remove the baseline helper columns
```

```{r echo = FALSE}
rel_mouse_df[1:10, ]
```

## Human data set augmentation

```{r echo = FALSE}
human_clean[1:10, ]
```

We implement the same notion as with the mouse data

```{r}
test_human <- select(human_clean, -c(treatment, cell_line))

zeroes_removed_human <- test_human |>
     select(where(~ !all(.x == 0)))
```

```{r}
joined_human <- zero_replacement(zeroes_removed_human, human_clean[1:2])
```

```{r}
human_aug <- joined_human |> 
  pivot_longer(
    cols = starts_with("ENSG"),
    names_to = "gene_id",
    values_to = "expression_levels"
  )
```

We can use it for a PCA analysis based on the relative expressions of the gene expressions among the 18 cell lines in the two different conditions.

```{r}
human_aug <- human_aug |>
  mutate(log2_expression_levels = log2(expression_levels)) |>
  select(-expression_levels)
```

```{r}
human_aug_wide_gene <- human_aug |>
  pivot_wider(names_from = gene_id,
              values_from =log2_expression_levels)
```

```{r echo = FALSE}
human_aug_wide_gene
```

Now we are going to create the format for another PCA using the log2fc as a value for the gene columns

```{r}
human_aug_wide_treat <- human_aug |>
  pivot_wider(names_from = "treatment",
              values_from = "log2_expression_levels")
```

```{r}
#This is where we are calculating the log2foldchange for every gene
human_aug_log2fc <- human_aug_wide_treat |>
  mutate(log2foldchange = G007LK - DMSO)|> 
  select(-c(DMSO, G007LK))
```

```{r}
human_aug_log2fc_wide <- human_aug_log2fc |>
  pivot_wider(names_from = gene_id,
              values_from =log2foldchange)
```

```{r echo = FALSE}
human_aug_log2fc_wide
```

We proceed without joining the mouse and the human supplementary data to the original data sets since they don't convey any useful information for our further analysis

```{r}
write_tsv(x = rel_mouse_df, file = str_c("../data/03_dat_aug_mouse", ".tsv.gz"))

write_tsv(human_aug, "../data/03_dat_aug_human.tsv.gz")
write_tsv(human_aug_wide_gene, "../data/03_dat_aug_human_wide_gene.tsv.gz")
write_tsv(human_aug_log2fc_wide, "../data/03_dat_aug_human_log2fc_wide.tsv.gz")
```
