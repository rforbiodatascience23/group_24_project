---
title: "04_describe"
format: html
editor: visual
---

Description

Before delving into the analysis, we would like to understand the data a bit better.

```{r}
install.packages("VennDiagram")
library(VennDiagram)
library(tidyverse)
library(purrr) 
library(dplyr)
library(ggplot2)
library(tidyr)
library(patchwork)
library(viridis)
library(ggridges)
```

```{r}
Sys.setenv(VROOM_CONNECTION_SIZE = 3062144)

human_aug <- read_tsv(file = "../data/03_dat_aug_human.tsv.gz") 
human_aug_log2fc <- read_tsv(file = "../data/03_dat_aug_human_log2fc.tsv.gz") human_clean_long <- read_tsv(file = "../data/02_dat_clean_human.tsv.gz")
mouse_wide <- read_tsv(file = "../data/02_dat_clean_mouse.tsv.gz")

```

We want to ensure that the data-set is balanced, such that each treatment is repeated the same number of times. We do this by counting the occurences of each treatment and replicate.

```{r}
treatment_counts <- mouse_wide |> 
  count(treatment) 
replicate_counts <- mouse_wide |>
  count(replicate) 


treatment_counts 
replicate_counts

```

We also want to understand each gene a bit better. To do this, we compute some summary statistics and count how many zeroes and nonzeroes there are in each column.

```{r}
gene_analysis <- mouse_wide |>
  #should be a fucntion 
  pivot_longer(cols = -c(treatment, replicate),
               names_to = "gene",
               values_to = "expression_levels" )
```

first we want to see the distribution of the expression levels

```{r}
#freqpolys

gene_analysis |>
  ggplot( mapping = aes (x = expression_levels))+
  geom_freqpoly()+ 
  facet_wrap(~treatment)
```

After log transformation

```{r}
gene_analysis |> 
  ggplot( mapping = aes (x = expression_levels))+
  geom_freqpoly()+ 
  facet_wrap(~treatment)


```

```{r}
genes_statistics<- gene_analysis |> 
  group_by(gene) |> 
  summarise(non_zero_count = sum(activity != 0), 
            zero_count = sum(activity == 0),
            max_value = max(activity),
            median_value = median(activity),
            average_value = mean(activity) 
            )
genes_statistics
```

We indeed have a lot of genes with no activity under any of the treatments

We can also get a crude look at the average activity of the treatments compare.

```{r}
 gene_analysis |> 
   group_by(treatment) |> 
   summarise(average_expression_levels = mean(expression_levels,
                                              na.rm = TRUE)) 
 # Plot average activity for each treatment

ggplot(data = gene_analysis, 
       mapping = aes(x = treatment, 
                     y = average_expression_levels)) +
  geom_bar(stat = "identity",
           fill = "blue") + 
  theme_minimal() +
  labs(title = "Average Gene Gene Expression for Each Treatment",
       x = "Treatment", 
       y = "Average Expression Levels")

 
```

They seem to be roughly the same, with the combined treatment being slightly higher than the rest. Lets look at the replicates within treatments as well.

```{r}
# Calculate average activity for each treatment and replicate
gene_analysis |> 
  group_by(treatment, replicate) |> 
  summarise(average_expression_levels = mean(expression_levels,
                                             na.rm = TRUE))
# Plot average activity for each treatment and replicate

ggplot(gene,
       mapping = aes(x = treatment, 
                     y = average_activity, 
                     fill = replicate)) + 
  geom_bar(stat = "identity", 
           position = position_dodge()) + 
  theme_minimal() + 
  labs(title = "Average Gene Activity by Treatment and Replicate", 
       x = "Treatment", 
       y = "Average Activity")
```

These are also very similar. It would be hard to know the treatment just from the activity. Let's look a bit more into the distribution of zeroes.

```{r}
#Calculate zero counts for each gene
zero_counts_genes <- gene_analyses |>
  group_by(gene) |> 
  summarise(zero_count = sum(activity == 0))

#Determine appropriate bin width
bin_width <- 1
#Create a histogram plot with percentages
histogram_percentage <- zero_counts_genes |> 
  ggplot(aes(x = zero_count)) + 
  geom_histogram(mapping = aes(y = ..count../sum(..count..)), 
                 binwidth = bin_width, 
                 fill = "green") + 
  scale_y_continuous(labels = scales::percent_format()) + 
  theme_minimal() + 
  labs(title = "Percentage Histogram of Zero Counts", 
       x = "Zero Counts", 
       y = "Percentage of Genes")

#Plot the histogram
histogram_percentage
```

We can see that most genes are either all zeroes(\~33%) or all non-zeroes(40%). Lets also compare number of active genes in each treatment.

```{r}
#Determine active genes (non-zero activity) for each treatment

active_genes_per_treatment <- gene_analysis |>
  filter(expression_levels > 0) |> 
  group_by(treatment) |> 
  summarise(active_genes = n_distinct(gene))

#Plot number of active genes per treatment

active_genes_plot <- active_genes_per_treatment |> 
  ggplot(mapping = aes(x = treatment, 
                       y = active_genes)) + 
  geom_bar(stat = "identity", 
           fill = "orange") + 
  theme_minimal() + 
  labs(title = "Number of Active Genes per Treatment", 
       x = "Treatment", 
       y = "Number of Active Genes")

active_genes_plot
```

Again, we get very similar numbers. Curiously, the combined treatment has lower active genes than G007LK. We can also compare the active an inactive gene sets of the treatments.

```{r}
#Prepare the list of active genes for each treatment

active_genes_sets <- gene_analysis |> 
  filter(expression_levels > 0) |> 
  select(treatment, gene) |> 
  distinct() |> 
  group_split(treatment) |> 
  map(~unique(.x$gene)) #iterate the group_split operation across every gene

#Generate the Venn diagram for a subset of treatments (e.g., the first three)

selected_treatments <- names(active_genes_sets)[-1] 
venn_data <- active_genes_sets |> 
  select(all_of(selected_treatments))

#Create the Venn diagram

venn_plot <- venn.diagram( x = venn_data,
                           category.names = selected_treatments, 
                           filename = NULL )

plot_venn <- function(venn_data, selected_treatments){ 
  venn_plot<- venn.diagram( x = venn_data, 
                            category.names = selected_treatments, 
                            filename = NULL ) 
  # Plot the Venn diagram 
  grid.newpage() 
  grid.draw(venn_plot) 
} 

venn_plot<- venn_data |> 
  plot_venn(selected_treatments)

```

After the log transformation

This is the human take on the descriptive analysis

Categorical variables: gene_id, cell_line, treatment, genotype

Numerical variables: expression_levels, log_expression_levels, log2foldchange

We check the distribution of expression levels

```{r}
human_aug |> 
  ggplot(mapping = aes (x = expression_levels))+ 
  geom_freqpoly()+ 
  facet_wrap(~treatment)
```

We observe many observations equal to zero, but how many of them are there for each treatment?

We have to check it

```{r}
 # Here "0.65 * min_pos_value" is equal to zero expression levels before adding the offset 
human_aug |> 
  filter(treatment == "DMSO") |> 
  summarise(DMSO_0 = sum(expression_levels == 0.65 * min_pos_value))

human_aug |> 
  filter(treatment == "G007LK") |> 
  summarise(G007LK_0 = sum(expression_levels == 0.65 * min_pos_value))
```

```{r}
zero_counts_genes <- human_aug |>
  group_by(gene_id) |> 
  summarise(zero_count = sum(expression_levels == 0))

#Determine appropriate bin width

bin_width <- 1 # Adjust this based on your data

#Create a histogram plot with percentages

histogram_percentage <- zero_counts_genes |> 
  ggplot(mapping = aes(x = zero_count)) +
  geom_histogram(mapping = aes(y = ..count../sum(..count..)), 
                 binwidth = bin_width, 
                 fill = "green") + 
  scale_y_continuous(labels = scales::percent_format()) + 
  theme_minimal() + 
  labs(title = "Percentage Histogram of Zero Counts", 
       x = "Zero Counts", 
       y = "Percentage of Genes")

#Plot the histogram

histogram_percentage

```

```{r}
human_aug |> 
  group_by(treatment, cell_line) |> 
  summarise(average_expression_levels = mean(expression_levels, na.rm = TRUE)) |>

#Plot average activity for each treatment and replicate

ggplot(mapping = aes(x = cell_line, 
                     y = average_expression_levels, 
                     fill = treatment)) + 
  geom_bar(stat = "identity", 
           position = position_dodge(width = 0.8)) + 
  theme_minimal() + 
  labs(title = "Average Gene Activity by Treatment and Cell line", 
       x = "Treatment", 
       y = "Average Expression levels")+ 
  scale_fill_discrete(name = "treatment")+ 
  theme(axis.text.x = element_text(angle = 45), 
        axis.text = element_text(vjust = 0.5, 
                                 size = 6))


```

```{r}
active_genes_per_cell <- human_aug |> 
  filter(expression_levels > 0) |> 
  group_by(cell_line) |> 
  summarise(active_genes = n_distinct(gene_id))

#Plot number of active genes per treatment

active_genes_plot <- ggplot(data = active_genes_per_cell, 
                            mapping =aes(x = cell_line, 
                                         y = active_genes)) + 
  geom_bar(stat = "identity", 
           fill = "orange") + 
  theme_minimal() + 
  labs(title = "Number of Active Genes per Cell Line", 
       x = "Cell Lines", 
       y = "Number of Active Genes")+ 
  theme(axis.text.x = element_text(angle = 45) )+ 
  scale_y_continuous(breaks = seq(0,27500, 
                                  by = 2500))

print(active_genes_plot)
```

We then check the distribution of expression levels after log2 transformation

```{r}
 ### DESC_3
human_aug_log |> 
  ggplot(mapping = aes(x = log2_expression_levels))+ 
  geom_freqpoly()+ 
  facet_wrap(~treatment)
```

We can see now that the distribution is less skewed but we can still see that the majority of the observations are equal to zero (equal to -33.92 after the log2 transformation).

The bulk of zeros suggests that, for many genes in many cell lines, there is no difference in expression between the two conditions. This is a common observation, as many genes in different cell lines may not respond strongly to experimental conditions.

```{r}
 average_expression_treatment <- human_aug |> 
   group_by(cell_line) |> 
   summarise(average_expression = mean(expression_levels, na.rm = TRUE))

human_aug |> 
  ggplot(aes(x = genotype , 
             y =expression_levels,
             color=treatment)) + 
  geom_boxplot()

average_expression_treatment |> 
  ggplot(aes(x=cell_line,
             y=average_expression))+ 
  geom_bar(stat="identity",
           fill='blue')
```

```{r}
gene_diff <- human_aug_log2fc |> 
  group_by(gene_id) |> 
  mutate(rank =(row_number(desc(abs(round(log2foldchange, 2)))))) |> 
  filter(rank <= 4) |> 
  # we take the best 4 log2fchange 
  ungroup() |> 
  select(gene_id,cell_line,log2foldchange)
```

```{r}
gene_diff |> 
  ggplot(aes(x = cell_line, 
             y = log2foldchange))+ 
  geom_boxplot()+ 
  coord_flip()
```

{r}

```{r}
#Δεν ξέρω αν θα το κρατήσουμε

human_aug_log2fc |> 
  filter(log2foldchange != 0) |> 
  ggplot(mapping = aes(x = log2foldchange,
                       y=cell_line,
                       fill=cell_line))+ 
  geom_density_ridges()+ 
  labs(x='OTU Count', 
       y='Taxa identified', 
       title='OTU Count Distribution for 5 Taxa Stratified on Site', 
       caption='Data from blah blah')+ 
  viridis::scale_fill_viridis(discrete=TRUE,
                              alpha=0.5)+ 
  theme(legend.position='bottom')+ 
  coord_cartesian(xlim = c(-1, 1))
```

{r}

```{r}
human_aug_log2fc|> 
  select(-genotype)|> 
  # filter(cell_line %in% c("LOX","A375"))|> 
  sample_n(50)|> 
  ggplot(aes(x=gene_id, 
             y=cell_line, 
             fill=log2foldchange))+ 
  geom_tile()+ 
  scale_fill_gradient2(low = 'blue', 
                       mid = 'pink', 
                       high ='red', 
                       midpoint= 0)+ 
  theme(axis.text.x = element_text(angle = 45, 
                                   vjust = 1, 
                                   hjust=1),
        axis.text=element_text(size=4), 
        axis.title=element_text(size=5))+ 
  theme(legend.position = 'bottom', 
        legend.key.size = unit(5, 'mm'), 
        legend.title=element_text(size=5), 
        legend.text=element_text(size=5))+ 
  coord_fixed(ratio=0.6)

```
